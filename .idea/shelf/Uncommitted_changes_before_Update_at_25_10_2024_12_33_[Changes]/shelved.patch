Index: BitWizard/src/main/java/com/wizard/controllers/HomeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.controllers;\r\n\r\nimport com.wizard.customs.CustomDettagliAgenzia;\r\nimport com.wizard.entities.Agenzia;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.security.authentication.AuthenticationManager;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.AuthenticationException;\r\nimport org.springframework.security.core.context.SecurityContextHolder;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.servlet.mvc.support.RedirectAttributes;\r\n\r\nimport com.wizard.customs.CustomDettagliUtente;\r\nimport com.wizard.entities.Utente;\r\nimport com.wizard.repos.UtenteTagDAO;\r\n\r\nimport jakarta.servlet.http.HttpSession;\r\n\r\n@Controller\r\npublic class HomeController {\r\n\t\r\n\t@Autowired\r\n\tprivate AuthenticationManager authenticationManager;\r\n    @Autowired\r\n    private UtenteTagDAO utenteTagDAO;\r\n\r\n    // Metodo per servire la pagina di login\r\n    @GetMapping(\"/login\")\r\n    public String showLoginPage() {\r\n        return \"login\";\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public String login(@RequestParam String email,\r\n                        @RequestParam String password,\r\n                        HttpSession session,\r\n                        RedirectAttributes redirectAttributes) {\r\n\r\n        try {\r\n            // Crea un token di autenticazione\r\n            UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(email, password);\r\n\r\n            // Autentica l'utente\r\n            Authentication authentication = authenticationManager.authenticate(authToken);\r\n\r\n            // Imposta l'utente autenticato nel contesto di sicurezza\r\n            SecurityContextHolder.getContext().setAuthentication(authentication);\r\n\r\n            // Recupera i dettagli dell'utente (cast a CustomDettagliUtente)\r\n            CustomDettagliUtente customUserDetails = (CustomDettagliUtente) authentication.getPrincipal();\r\n\r\n            // Ottieni l'istanza di Utente dall'oggetto CustomDettagliUtente\r\n            Utente utente = customUserDetails.getUtente(); // Supponendo che CustomDettagliUtente abbia un metodo getUtente()\r\n\r\n            // Memorizza l'utente nella sessione\r\n            session.setAttribute(\"utenteLoggato\", utente);\r\n            \r\n         // Recupera l'URL precedente dalla sessione\r\n          //  String urlPrecedente = (String) session.getAttribute(\"urlPrecedente\");\r\n\r\n            // Reindirizza all'URL precedente o alla home se l'URL non Ã¨ disponibile\r\n            // return \"redirect:\" + (urlPrecedente != null ? urlPrecedente : \"/home\");\r\n            \r\n            return \"redirect:/\";\r\n\r\n        } catch (AuthenticationException e) {\r\n            // Autenticazione fallita\r\n            redirectAttributes.addFlashAttribute(\"loginError\", \"Credenziali non valide. Per favore riprova.\");\r\n            return \"redirect:/login\";\r\n        }\r\n    }\r\n    \r\n    @PostMapping(\"/logout\")\r\n    public ResponseEntity<String> logout(HttpSession session) {\r\n        // Invalida la sessione\r\n        session.invalidate();\r\n\r\n        // Rimuovi l'autenticazione dal contesto di sicurezza\r\n        SecurityContextHolder.clearContext();\r\n\r\n        // Restituisce una risposta di conferma con lo status HTTP 200\r\n        return ResponseEntity.ok(\"Logout effettuato con successo.\");\r\n    }\r\n\r\n    @GetMapping(\"\")\r\n    public String home(HttpSession session, Model model) {\r\n    \t\r\n        Utente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\r\n        if (utente != null) {\r\n            // model.addAttribute(\"tagsUtente\",utente.getUtenteTags().stream().map(UtenteTag::getTag).findAny().get().getTagId().intValue());\r\n            model.addAttribute(\"nomeUtente\", utente.getNome());\r\n           // model.addAttribute(\"idUtente\", utente.getUtenteId());\r\n            model.addAttribute(\"messaggioBenvenuto\", \"Benvenuto, \" + utente.getNome() + \"!\");\r\n        }\r\n        return \"home\";\r\n    }\r\n    \r\n    @GetMapping(\"/CreaViaggio\")\r\n    public String showCreaViaggioPage() {\r\n        return \"CreaViaggio\";\r\n    }\r\n    \r\n    @GetMapping(\"/ModificaViaggio\")\r\n    public String showModificaViaggioPage() {\r\n        return \"ModificaViaggio\";\r\n    }\r\n    \r\n    @GetMapping(\"/ModificaProfilo\")\r\n    public String showModificaUtentePage() {\r\n        return \"ModificaProfilo\";\r\n    }\r\n    \r\n    @GetMapping(\"/registrazione\")\r\n    public String showSignupPage() {\r\n        return \"registrazione\";\r\n    }\r\n\r\n    @GetMapping(\"/registrazioneAgenzia\")\r\n    public String showAziendaSignupPage() {\r\n        return \"registrazioneAgenzia\";\r\n    }\r\n    \r\n    @GetMapping(\"/paginaPersonale\")\r\n    public String getPaginaPersonaleUtente(HttpSession session) {\r\n    \tUtente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n        if (utente == null) {\r\n            return \"redirect:/login\";\r\n        }\r\n        return \"paginaPersonaleUtente\";\r\n    }\r\n    \r\n\t@GetMapping(\"/paginaViaggio/viaggio\")\r\n\tpublic String getPaginaViaggio(@RequestParam Long viaggioId) {    \r\n\t    return \"Viaggio\";\r\n\t}\r\n\r\n\t@GetMapping(\"lista\")\r\n\tpublic String getAllViaggi(//HttpSession session\r\n\t\t\t)\r\n\t\t\t{\r\n\t//Utente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\t//if (utente == null) {\r\n\t//return \"redirect:/login\";\r\n\r\n\t//}\r\n\treturn \"listaViaggi\";\r\n\t}\r\n\t\r\n\t@GetMapping (\"/ricerca\")\r\n    public String showRicercaUtente() { return \"Filters\";}\r\n\r\n    @GetMapping(\"loginAgenzia\")\r\n    public String showLoginAgenziaPage(){\r\n\r\n        return \"loginAgenzia\";\r\n    }\r\n\r\n   @PostMapping(\"/loginAgenzia\")\r\n   public String loginAgenzia(@RequestParam String partitaIva,\r\n                       @RequestParam String password,\r\n                       HttpSession session,\r\n                       RedirectAttributes redirectAttributes) {\r\n       try {\r\n           // Crea un token di autenticazione\r\n           UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(partitaIva, password);\r\n\r\n          // Autentica l'agenzia\r\n           Authentication authentication = authenticationManager.authenticate(authToken);\r\n\r\n           // Imposta l'agenzia autenticata nel contesto di sicurezza\r\n           SecurityContextHolder.getContext().setAuthentication(authentication);\r\n\r\n           // Recupera i dettagli dell'agenzia (cast a CustomDettagliAgenzia)\r\n           CustomDettagliAgenzia customDettagliAgenzia = (CustomDettagliAgenzia) authentication.getPrincipal();\r\n\r\n           // Ottieni l'istanza di Agenzia dall'oggetto CustomDettagliAgenzia\r\n           Agenzia agenzia = customDettagliAgenzia.getAgenzia(); // Supponendo che CustomDettagliAgenzia abbia un metodo getAgenzia()\r\n\r\n           // Memorizza l'agenzia nella sessione\r\n           session.setAttribute(\"agenziaLoggata\", agenzia);\r\n\r\n\r\n           return \"redirect:/\";\r\n\r\n       } catch (AuthenticationException e) {\r\n\r\n            e.printStackTrace();\r\n           return \"redirect:/loginAzienda\";\r\n       }\r\n   }\r\n\r\n\r\n\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/controllers/HomeController.java b/BitWizard/src/main/java/com/wizard/controllers/HomeController.java
--- a/BitWizard/src/main/java/com/wizard/controllers/HomeController.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/controllers/HomeController.java	(date 1729850562152)
@@ -162,6 +162,11 @@
         return "loginAgenzia";
     }
 
+    @GetMapping("/homeAgenzia")
+    public String showHomeAgenzia(){
+        return "homeAgenzia";
+    }
+
    @PostMapping("/loginAgenzia")
    public String loginAgenzia(@RequestParam String partitaIva,
                        @RequestParam String password,
@@ -187,7 +192,7 @@
            session.setAttribute("agenziaLoggata", agenzia);
 
 
-           return "redirect:/";
+           return "redirect:/homeAgenzia";
 
        } catch (AuthenticationException e) {
 
Index: BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.controllers;\r\n\r\nimport java.io.IOException;\r\nimport java.util.Date;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.PutMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RequestParam;\r\nimport org.springframework.web.bind.annotation.RequestPart;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\nimport com.wizard.DTO.TagDTO;\r\nimport com.wizard.DTO.ViaggioCreazioneDTO;\r\nimport com.wizard.entities.Agenzia;\r\nimport com.wizard.entities.Immagine;\r\nimport com.wizard.entities.PartecipantiViaggio;\r\nimport com.wizard.entities.Utente;\r\nimport com.wizard.entities.Viaggio;\r\nimport com.wizard.entities.ViaggioImmagini;\r\nimport com.wizard.repos.ImmagineDAO;\r\nimport com.wizard.repos.PartecipantiViaggioDAO;\r\nimport com.wizard.repos.UtenteDAO;\r\nimport com.wizard.repos.ViaggioDAO;\r\nimport com.wizard.repos.ViaggioDTO;\r\nimport com.wizard.repos.ViaggioImmaginiDAO;\r\nimport com.wizard.repos.ViaggioTagDAO;\r\nimport com.wizard.services.NotificaService;\r\nimport com.wizard.services.ViaggioService;\r\n\r\nimport jakarta.servlet.http.HttpSession;\r\nimport jakarta.transaction.Transactional;\r\nimport jakarta.validation.Valid;\r\n\r\n\r\n@RestController\r\n@RequestMapping(\"/api/viaggi\")\r\npublic class ViaggioController {\r\n\t\r\n    @Autowired\r\n    private ViaggioService viaggioService;\r\n    \r\n    @Autowired\r\n    private ViaggioDAO viaggioDAO;\r\n    \r\n    @Autowired\r\n    private UtenteDAO utenteDAO;\r\n    \r\n    @Autowired\r\n    private ImmagineDAO immagineDAO;\r\n    \r\n    @Autowired\r\n    private ViaggioImmaginiDAO viaggioImmaginiDAO;\r\n    \r\n    @Autowired\r\n    private ViaggioTagDAO viaggioTagDAO;\r\n    \r\n    @Autowired\r\n    private PartecipantiViaggioDAO partecipantiViaggioDAO;\r\n    \r\n    @Autowired\r\n    private NotificaService notificaService;\r\n\r\n    @PostMapping(value = \"/crea\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\r\n    @Transactional\r\n    public ResponseEntity<?> creaViaggio(\r\n            @RequestPart(\"viaggioDTO\") @Valid ViaggioCreazioneDTO viaggioDTO,\r\n            @RequestPart(value = \"immagineCopertina\", required = false) MultipartFile immagineCopertina,\r\n            @RequestPart(value = \"immagini\", required = false) List<MultipartFile> immagini,\r\n            HttpSession session) {\r\n\r\n        try {\r\n            // Recupera il creatore dalla sessione\r\n            Utente creatore = (Utente) session.getAttribute(\"utenteLoggato\");\r\n            Agenzia agenzia = (Agenzia) session.getAttribute(\"agenziaLoggata\");\r\n            if (creatore == null) {\r\n                if (agenzia == null) {\r\n                    throw new IllegalArgumentException(\"Agenzia o Utente  non presenti nella sessione\");\r\n                }\r\n            }\r\n\r\n            // Ottieni la lista di tag dal DTO\r\n            List<TagDTO> tagDTOs = viaggioDTO.getTags();\r\n\r\n            // Creazione del viaggio dall'oggetto DTO\r\n            Viaggio nuovoViaggio = createViaggioFromDTO(viaggioDTO);\r\n\r\n            if (creatore == null) {\r\n                nuovoViaggio.setAgenziaId(agenzia.getAziendaId());\r\n            }else {\r\n                nuovoViaggio.setCreatoreId(creatore.getUtenteId());\r\n            }\r\n\r\n            // Gestione dell'immagine di copertina, se presente\r\n            if (immagineCopertina != null && !immagineCopertina.isEmpty()) {\r\n                handleProfileImage(nuovoViaggio, immagineCopertina);\r\n            }\r\n            // Salva il viaggio con i tag associati\r\n            //Controllo se nella session c'Ã¨ un'azienda o un utente\r\n\r\n            if(agenzia==null){\r\n                Viaggio viaggioSalvato = viaggioService.salvaViaggio(nuovoViaggio, tagDTOs);\r\n                // Gestione delle altre immagini, se presenti\r\n                if (immagini != null && !immagini.isEmpty()) {\r\n                    for (MultipartFile immagine : immagini) {\r\n                        if (!immagine.isEmpty()) {\r\n                            // Crea l'entitÃ  Immagine e la salva\r\n                            Immagine immagineEntity = new Immagine();\r\n                            immagineEntity.setImg(immagine.getBytes());\r\n                            immagineDAO.save(immagineEntity);\r\n\r\n                            // Crea l'entitÃ  ViaggioImmagini per l'associazione\r\n                            ViaggioImmagini viaggioImmagine = new ViaggioImmagini();\r\n                            viaggioImmagine.setViaggio(viaggioSalvato);\r\n                            viaggioImmagine.setImmagine(immagineEntity);\r\n\r\n                            // Salva l'associazione nel repository\r\n                            viaggioImmaginiDAO.save(viaggioImmagine);\r\n                        }\r\n                    }\r\n                }\r\n                return new ResponseEntity<>(viaggioSalvato, HttpStatus.CREATED);\r\n\r\n            }else {\r\n                Viaggio viaggioSalvato= viaggioService.salvaViaggioAgenzia(nuovoViaggio, tagDTOs);\r\n                // Gestione delle altre immagini, se presenti\r\n                if (immagini != null && !immagini.isEmpty()) {\r\n                    for (MultipartFile immagine : immagini) {\r\n                        if (!immagine.isEmpty()) {\r\n                            // Crea l'entitÃ  Immagine e la salva\r\n                            Immagine immagineEntity = new Immagine();\r\n                            immagineEntity.setImg(immagine.getBytes());\r\n                            immagineDAO.save(immagineEntity);\r\n\r\n                            // Crea l'entitÃ  ViaggioImmagini per l'associazione\r\n                            ViaggioImmagini viaggioImmagine = new ViaggioImmagini();\r\n                            viaggioImmagine.setViaggio(viaggioSalvato);\r\n                            viaggioImmagine.setImmagine(immagineEntity);\r\n\r\n                            // Salva l'associazione nel repository\r\n                            viaggioImmaginiDAO.save(viaggioImmagine);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return new ResponseEntity<>(viaggioSalvato, HttpStatus.CREATED);\r\n            }\r\n        } catch (IllegalArgumentException e) {\r\n            // Restituisce una risposta di errore specifico\r\n            Map<String, String> errorResponse = new HashMap<>();\r\n            errorResponse.put(\"error\", e.getMessage());\r\n            return new ResponseEntity<>(errorResponse, HttpStatus.BAD_REQUEST);\r\n        } catch (Exception e) {\r\n            // Restituisce una risposta di errore generico\r\n            Map<String, String> errorResponse = new HashMap<>();\r\n            errorResponse.put(\"error\", \"Errore nella creazione del viaggio\");\r\n            errorResponse.put(\"message\", e.getMessage());\r\n            return new ResponseEntity<>(errorResponse, HttpStatus.INTERNAL_SERVER_ERROR);\r\n        }\r\n    }\r\n\r\n\r\n    private Viaggio createViaggioFromDTO(ViaggioCreazioneDTO viaggioDTO) {\r\n        Viaggio viaggio = new Viaggio();\r\n        viaggio.setNome(viaggioDTO.getNome());\r\n        viaggio.setLuogoPartenza(viaggioDTO.getLuogoPartenza());\r\n        viaggio.setLuogoArrivo(viaggioDTO.getLuogoArrivo());\r\n        viaggio.setDataPartenza(viaggioDTO.getDataPartenza());\r\n        viaggio.setDataRitorno(viaggioDTO.getDataRitorno());\r\n        viaggio.setDataScadenza(viaggioDTO.getDataScadenza());\r\n        viaggio.setNumPartMin(viaggioDTO.getNumPartMin());\r\n        viaggio.setNumPartMax(viaggioDTO.getNumPartMax());\r\n        viaggio.setEtaMin(viaggioDTO.getEtaMin());\r\n        viaggio.setEtaMax(viaggioDTO.getEtaMax());\r\n        viaggio.setPrezzo(viaggioDTO.getPrezzo());\r\n        viaggio.setCreatoIl(new Date());\r\n        return viaggio;\r\n    }\r\n    \r\n    @PutMapping(\"/modifica/{viaggioId}\")\r\n    public ResponseEntity<ViaggioDTO> modificaViaggio(\r\n            @PathVariable Long viaggioId,\r\n            @RequestBody ViaggioCreazioneDTO viaggioDTO) {\r\n        List<TagDTO> tagDTOs = viaggioDTO.getTags();\r\n        ViaggioDTO updatedViaggio = viaggioService.modificaViaggio(viaggioId, viaggioDTO, tagDTOs);\r\n        return ResponseEntity.ok(updatedViaggio);\r\n    }\r\n    \r\n    @GetMapping(\"/{viaggioId}/immagine\")\r\n    public ResponseEntity<byte[]> getImmagineViaggio(@PathVariable Long viaggioId) {\r\n        Viaggio viaggio = viaggioDAO.findById(viaggioId)\r\n            .orElseThrow(() -> new RuntimeException(\"Viaggio non trovato\"));\r\n\r\n        if (viaggio.getImmagineCopertina() == null) {\r\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n        }\r\n\r\n        byte[] immagine = viaggio.getImmagineCopertina().getImg();\r\n\r\n        HttpHeaders headers = new HttpHeaders();\r\n        headers.setContentType(MediaType.IMAGE_JPEG);\r\n\r\n        return new ResponseEntity<>(immagine, headers, HttpStatus.OK);\r\n    }\r\n    \r\n    @PostMapping(\"/iscriviti/{viaggioId}\")\r\n    public ResponseEntity<?> iscriviUtenteAlViaggio(@PathVariable Long viaggioId, HttpSession session) {\r\n        \r\n        System.out.println(\"Inizio dell'iscrizione per il viaggio con ID: \" + viaggioId);\r\n        \r\n        try {\r\n            // Recupera l'id dell'utente dalla session\r\n        \tUtente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n        \tLong utenteId = utente.getUtenteId();\r\n            if (utenteId == null) {\r\n                System.out.println(\"Utente non autenticato. Nessun utenteId trovato nella sessione.\");\r\n                throw new IllegalStateException(\"Utente non autenticato\");\r\n            } else {\r\n                System.out.println(\"Utente autenticato con ID: \" + utenteId);\r\n            }\r\n\r\n            // Recupera il viaggio\r\n            System.out.println(\"Tentativo di recuperare il viaggio con ID: \" + viaggioId);\r\n            Viaggio viaggio = viaggioDAO.findById(viaggioId)\r\n                .orElseThrow(() -> {\r\n                    System.out.println(\"Viaggio con ID \" + viaggioId + \" non trovato.\");\r\n                    return new IllegalArgumentException(\"Viaggio non trovato\");\r\n                });\r\n            System.out.println(\"Viaggio trovato: \" + viaggio.getNome());\r\n\r\n            // Recupera l'utente\r\n            System.out.println(\"Tentativo di recuperare l'utente con ID: \" + utenteId);\r\n            Utente partecipante = utenteDAO.findById(utenteId)\r\n                .orElseThrow(() -> {\r\n                    System.out.println(\"Utente con ID \" + utenteId + \" non trovato.\");\r\n                    return new IllegalArgumentException(\"Utente non trovato\");\r\n                });\r\n            System.out.println(\"Utente trovato: \" + partecipante.getNome() + \" \" + partecipante.getCognome());\r\n\r\n            // Aggiungi il partecipante al viaggio\r\n            System.out.println(\"Tentativo di iscrivere l'utente al viaggio...\");\r\n            PartecipantiViaggio utenteIscritto = viaggioService.addPartecipanteViaggio(partecipante, viaggio);\r\n            System.out.println(\"Utente iscritto al viaggio con successo!\");\r\n            \r\n            // Restituisci la risposta con i dettagli dell'iscrizione\r\n            return ResponseEntity.ok(utenteIscritto);\r\n\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(\"Errore: \" + e.getMessage());\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            System.out.println(\"Errore generico durante l'iscrizione al viaggio: \" + e.getMessage() + e.getCause() + e.getStackTrace());\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Errore durante l'iscrizione al viaggio\");\r\n        }\r\n    }\r\n    \r\n    @DeleteMapping(\"/iscriviti/rimuovi/{viaggioId}\")\r\n    public ResponseEntity<?> rimuoviPartecipante(@PathVariable Long viaggioId, HttpSession session) {\r\n    \t\r\n    \t try {\r\n             // Recupera l'id dell'utente dalla session\r\n         \tUtente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n         \tLong utenteId = utente.getUtenteId();\r\n             if (utenteId == null) {\r\n                 System.out.println(\"Utente non autenticato. Nessun utenteId trovato nella sessione.\");\r\n                 throw new IllegalStateException(\"Utente non autenticato\");\r\n             } else {\r\n                 System.out.println(\"Utente autenticato con ID: \" + utenteId);\r\n             }\r\n             \r\n            viaggioService.removePartecipanteViaggio(utenteId, viaggioId);\r\n            \r\n            Viaggio viaggio = viaggioDAO.findById(viaggioId)\r\n                    .orElseThrow(() -> {\r\n                        System.out.println(\"Viaggio con ID \" + viaggioId + \" non trovato.\");\r\n                        return new IllegalArgumentException(\"Viaggio non trovato\");\r\n                    });\r\n            \r\n            try {\r\n\t            notificaService.creaNotifichePerAnnullamentoIscrizioneViaggio(viaggio, utente);\r\n\t        } catch (Exception e) {\r\n\t            System.err.println(\"Errore durante la creazione delle notifiche per il viaggio con id \" + viaggioId);\r\n\t        }\r\n            \r\n            return ResponseEntity.ok(\"Partecipante rimosso con successo\");\r\n        } catch (IllegalArgumentException e) {\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        }\r\n    }\r\n    \r\n    @PutMapping(\"/annulla/{viaggioId}\")\r\n    public ResponseEntity<?> annullaViaggio(@PathVariable Long viaggioId) {\r\n        \r\n        System.out.println(\"Inizio dell'annullamento per il viaggio con ID: \" + viaggioId);\r\n        try {\r\n            // Recupera il viaggio\r\n            System.out.println(\"Tentativo di recuperare il viaggio con ID: \" + viaggioId);\r\n            Viaggio viaggio = viaggioDAO.findById(viaggioId)\r\n                .orElseThrow(() -> {\r\n                    System.out.println(\"Viaggio con ID \" + viaggioId + \" non trovato.\");\r\n                    return new IllegalArgumentException(\"Viaggio non trovato\");\r\n                });\r\n            \r\n            System.out.println(\"Viaggio trovato: \" + viaggio.getNome());\r\n            \r\n            // Imposta il flag di cancellazione e salva le modifiche\r\n            viaggio.setDeleted(true);\r\n            viaggioDAO.save(viaggio);  // Salva la modifica nel database\r\n            \r\n            try {\r\n\t            notificaService.creaNotifichePerPartecipantiAnnullaViaggio(viaggio);\r\n\t        } catch (Exception e) {\r\n\t            System.err.println(\"Errore durante la creazione delle notifiche per il viaggio con id \" + viaggioId);\r\n\t        }\r\n\r\n            System.out.println(\"Viaggio con ID \" + viaggioId + \" annullato con successo.\");\r\n            return ResponseEntity.ok(\"Viaggio annullato con successo\");\r\n\r\n        } catch (IllegalArgumentException e) {\r\n            System.out.println(\"Errore: \" + e.getMessage());\r\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage());\r\n        } catch (Exception e) {\r\n            System.out.println(\"Errore generico durante l'annullamento del viaggio: \" + e.getMessage());\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"Errore durante l'annullamento del viaggio\");\r\n        }\r\n    }\r\n    \r\n    @GetMapping(\"/utente\")\r\n    public ResponseEntity<List<ViaggioDTO>> getViaggiUtente(HttpSession session) {\r\n        Utente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\r\n        if (utente == null) {\r\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\r\n        }\r\n\r\n        List<ViaggioDTO> viaggi = viaggioService.findViaggiByUtenteId(utente.getUtenteId());\r\n        return ResponseEntity.ok(viaggi);\r\n    }\r\n    \r\n    @GetMapping(\"/utente/finito\")\r\n    public ResponseEntity<List<ViaggioDTO>> getViaggiUtenteFiniti(HttpSession session) {\r\n        Utente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\r\n        if (utente == null) {\r\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\r\n        }\r\n\r\n        // Ottieni la data corrente\r\n        Date dataCorrente = new Date();\r\n\r\n        // Recupera i viaggi dell'utente e filtra quelli finiti (data di ritorno passata)\r\n        List<ViaggioDTO> viaggiFiniti = viaggioService.findViaggiByUtenteId(utente.getUtenteId()).stream()\r\n            .filter(viaggio -> viaggio.getDataRitorno().before(dataCorrente)) // Filtra i viaggi la cui data di ritorno Ã¨ passata\r\n            .collect(Collectors.toList());\r\n\r\n        return ResponseEntity.ok(viaggiFiniti);\r\n    }\r\n    \r\n    @GetMapping(\"/utente/iscritto\")\r\n    public ResponseEntity<List<ViaggioDTO>> getViaggiUtenteIscritto(HttpSession session) {\r\n        Utente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\r\n        if (utente == null) {\r\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\r\n        }\r\n        \r\n        List<Viaggio> viaggi = viaggioService.trovaViaggiPerUtente(utente.getUtenteId());\r\n\r\n     // Mappa i viaggi in ViaggioDTO\r\n        List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n                                           .map(viaggioService::toDTO)\r\n                                           .collect(Collectors.toList());\r\n        \r\n        return ResponseEntity.ok(viaggiDTO);\r\n    }\r\n\r\n    @GetMapping(\"/creatore\")\r\n    public ResponseEntity<List<ViaggioDTO>> getViaggiByCreatoreId(HttpSession session){\r\n    \t\r\n    \tUtente utente = (Utente) session.getAttribute(\"utenteLoggato\");\r\n\r\n        if (utente == null) {\r\n            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);\r\n        }\r\n        \r\n        Long creatoreId = utente.getUtenteId();\r\n\r\n        Utente creatore = utenteDAO.findById(creatoreId).orElse(null);\r\n        if (creatore == null) {\r\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n        }\r\n\r\n       List<ViaggioDTO> viaggi = viaggioService.findViaggiByCreatore(creatoreId);\r\n\r\n        if (viaggi == null) {\r\n            return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n        }\r\n       return ResponseEntity.ok(viaggi);\r\n\r\n    }\r\n\r\n    @GetMapping(\"/altroUtente\")\r\n    public ResponseEntity<List<ViaggioDTO>> getViaggiAltroUtente(@RequestParam Long utenteId) {\r\n\r\n            Utente utente = utenteDAO.findById(utenteId).orElse(null);\r\n            if (utente == null) {\r\n                return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n            }\r\n            List<ViaggioDTO> viaggi = viaggioService.findViaggiByUtenteId(utenteId);\r\n            if (viaggi == null) {\r\n                return new ResponseEntity<>(HttpStatus.NOT_FOUND);\r\n            }\r\n            return ResponseEntity.ok(viaggi);\r\n\r\n\r\n    }\r\n\r\n    @GetMapping(\"lista\")\r\n    public ResponseEntity<?> getViaggi() {\r\n\r\n    \ttry{\r\n    \t\tList<ViaggioDTO> allViaggi = viaggioService.getAllViaggi();\r\n\r\n    \t\tif (allViaggi.isEmpty()) {\r\n    \t\t\treturn ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n    \t\t\t\t\t.body(\"lista non trovata\");\r\n    \t\t}\r\n    \t\treturn ResponseEntity.ok(allViaggi);\r\n    \t}\r\n    \tcatch (Exception e) {\r\n    \t\treturn ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n    \t\t\t.body(\"Errore interno: \" + e.getMessage());\r\n    \t}\r\n\r\n    }\r\n\r\n    @GetMapping(\"/filtra/tag\")\r\n    public ResponseEntity<?> getViaggiByTag(@RequestParam Integer tagId) {\r\n    \t\r\n    \ttry {\r\n                List<ViaggioDTO> viaggi = viaggioService.getViaggiByTag(tagId);\r\n                \r\n                if (viaggi.isEmpty()) {\r\n                    return ResponseEntity.status(HttpStatus.NOT_FOUND)\r\n                                         .body(\"Nessun viaggio trovato per il tag ID: \" + tagId);\r\n                }\r\n                \r\n                return ResponseEntity.ok(viaggi);\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                                     .body(\"Parametro tagId non valido: \" + e.getMessage());\r\n            } catch (Exception e) {\r\n                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                                     .body(\"Errore interno: \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n        @GetMapping(\"/filtra/eta\")\r\n        public ResponseEntity<?> getViaggiByEta(@RequestParam Integer min, @RequestParam Integer max) {\r\n            \r\n        \ttry {\r\n                List<ViaggioDTO> viaggi = viaggioService.getViaggiByEta(min, max);\r\n                \r\n                if (viaggi.isEmpty()) {\r\n                    return ResponseEntity.status(HttpStatus.NOT_FOUND)\r\n                                         .body(\"Nessun viaggio trovato per l'intervallo di etÃ : \" + min + \" - \" + max);\r\n                }\r\n                \r\n                return ResponseEntity.ok(viaggi);\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                                     .body(\"Intervallo di etÃ  non valido: \" + e.getMessage());\r\n            } catch (Exception e) {\r\n                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                                     .body(\"Errore interno: \" + e.getMessage());\r\n            }\r\n        }\r\n        \r\n        @GetMapping(\"/filtra/destinazione\")\r\n        public ResponseEntity<?> getViaggiByDestinazione(@RequestParam String destinazione) {\r\n            try {\r\n                // Cerca i viaggi per destinazione (luogoArrivo)\r\n                List<ViaggioDTO> viaggi = viaggioService.getViaggiByDestinazione(destinazione);\r\n                \r\n                if (viaggi.isEmpty()) {\r\n                    // Restituisce 404 se non ci sono viaggi trovati per la destinazione\r\n                    return ResponseEntity.status(HttpStatus.NOT_FOUND)\r\n                                         .body(\"Nessun viaggio trovato per la destinazione: \" + destinazione);\r\n                }\r\n\r\n                // Restituisce 200 OK con i viaggi trovati\r\n                return ResponseEntity.ok(viaggi);\r\n\r\n            } catch (IllegalArgumentException e) {\r\n                // Gestione di errori legati a parametri non validi\r\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                                     .body(\"Parametro destinazione non valido: \" + e.getMessage());\r\n            } catch (Exception e) {\r\n                // Gestione generica di errori imprevisti\r\n                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                                     .body(\"Errore interno: \" + e.getMessage());\r\n            }\r\n        }\r\n\r\n\r\n    @GetMapping(\"/filtra/partenza\")\r\n    public ResponseEntity<?> getViaggiByPartenza(@RequestParam String partenza) {\r\n        try {\r\n            // Cerca i viaggi per destinazione (luogoArrivo)\r\n            List<ViaggioDTO> viaggi = viaggioService.getViaggiByPartenza(partenza);\r\n\r\n            if (viaggi.isEmpty()) {\r\n                // Restituisce 404 se non ci sono viaggi trovati per la destinazione\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND)\r\n                        .body(\"Nessun viaggio trovato per la destinazione: \" + partenza);\r\n            }\r\n\r\n            // Restituisce 200 OK con i viaggi trovati\r\n            return ResponseEntity.ok(viaggi);\r\n\r\n        } catch (IllegalArgumentException e) {\r\n            // Gestione di errori legati a parametri non validi\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                    .body(\"Parametro destinazione non valido: \" + e.getMessage());\r\n        } catch (Exception e) {\r\n            // Gestione generica di errori imprevisti\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Errore interno: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    @GetMapping(\"/filtra/prezzo\")\r\n    public ResponseEntity<?> getViaggiByPrezzo(@RequestParam Integer min, @RequestParam Integer max) {\r\n\r\n        try {\r\n            List<ViaggioDTO> viaggi = viaggioService.getViaggiByPrezzo(min,max);\r\n\r\n            if (viaggi.isEmpty()) {\r\n                return ResponseEntity.status(HttpStatus.NOT_FOUND)\r\n                        .body(\"Nessun viaggio trovato per l'intervallo di etÃ : \" + min + \" - \" + max);\r\n            }\r\n\r\n            return ResponseEntity.ok(viaggi);\r\n\r\n        } catch (IllegalArgumentException e) {\r\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST)\r\n                    .body(\"Intervallo di etÃ  non valido: \" + e.getMessage());\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)\r\n                    .body(\"Errore interno: \" + e.getMessage());\r\n        }\r\n    }\r\n    \r\n    private void handleProfileImage(Viaggio viaggio, MultipartFile imgProfilo) throws IOException {\r\n        String contentType = imgProfilo.getContentType();\r\n        if (!\"image/jpeg\".equals(contentType) && !\"image/png\".equals(contentType)) {\r\n            throw new IllegalArgumentException(\"Formato immagine non valido. Sono accettati solo JPEG e PNG.\");\r\n        }\r\n\r\n        byte[] imgBytes = imgProfilo.getBytes();\r\n        Immagine immagine = new Immagine();\r\n        immagine.setImg(imgBytes);\r\n        immagineDAO.save(immagine);\r\n        System.out.println(\"creata immagine con id: \" + immagine.getIdImg());\r\n        viaggio.setImmagineCopertina(immagine);\r\n    }\r\n    \r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java b/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java
--- a/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java	(date 1729849558821)
@@ -7,6 +7,7 @@
 import java.util.Map;
 import java.util.stream.Collectors;
 
+import com.wizard.repos.*;
 import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.http.HttpHeaders;
 import org.springframework.http.HttpStatus;
@@ -32,13 +33,6 @@
 import com.wizard.entities.Utente;
 import com.wizard.entities.Viaggio;
 import com.wizard.entities.ViaggioImmagini;
-import com.wizard.repos.ImmagineDAO;
-import com.wizard.repos.PartecipantiViaggioDAO;
-import com.wizard.repos.UtenteDAO;
-import com.wizard.repos.ViaggioDAO;
-import com.wizard.repos.ViaggioDTO;
-import com.wizard.repos.ViaggioImmaginiDAO;
-import com.wizard.repos.ViaggioTagDAO;
 import com.wizard.services.NotificaService;
 import com.wizard.services.ViaggioService;
 
@@ -412,6 +406,44 @@
        return ResponseEntity.ok(viaggi);
 
     }
+
+    @GetMapping("/azienda/creati")
+    public ResponseEntity<List<ViaggioDTO>> getViaggiByAziendaId(HttpSession session){
+
+        Agenzia agenzia = (Agenzia) session.getAttribute("agenziaLoggata");
+        if(agenzia == null) {
+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
+        }
+        List<ViaggioDTO> viaggi = viaggioService.getViaggiByAgenzia(agenzia.getAziendaId());
+
+        if (viaggi == null) {
+            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
+        }
+        return ResponseEntity.ok(viaggi);
+
+    }
+    @GetMapping("/azienda/terminati")
+    public ResponseEntity<List<ViaggioDTO>> getViaggiTerminatiByAgenziaId(HttpSession session){
+
+        Agenzia agenzia = (Agenzia) session.getAttribute("agenziaLoggata");
+
+        if (agenzia == null) {
+            return new ResponseEntity<>(HttpStatus.UNAUTHORIZED);
+        }
+
+        // Ottieni la data corrente
+        Date dataCorrente = new Date();
+
+        // Recupera i viaggi dell'utente e filtra quelli finiti (data di ritorno passata)
+        List<ViaggioDTO> viaggiFiniti = viaggioService.getViaggiByAgenzia(agenzia.getAziendaId()).stream()
+                .filter(viaggio -> viaggio.getDataRitorno().before(dataCorrente)) // Filtra i viaggi la cui data di ritorno Ã¨ passata
+                .collect(Collectors.toList());
+
+        return ResponseEntity.ok(viaggiFiniti);
+
+
+
+    }
 
     @GetMapping("/altroUtente")
     public ResponseEntity<List<ViaggioDTO>> getViaggiAltroUtente(@RequestParam Long utenteId) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c5a118e0-2116-4f21-baf4-91041972526f\" name=\"Changes\" comment=\"Iscrizione viaggi agenzie\">\r\n      <change beforePath=\"$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Exception\" />\r\n        <option value=\"HTML File\" />\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"092ab797816b0dde492e053898a550b209edec06\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;geeuleeo&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/geeuleeo/BitWizard.git&quot;,\r\n    &quot;accountId&quot;: &quot;09af8a30-17d1-4f5e-ba07-1817857aed2f&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 0\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2n9PFZSopLnPOQESar8RqD1VJsV\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"DefaultHtmlFileTemplate\": \"HTML File\",\r\n    \"RequestMappingsPanelOrder0\": \"0\",\r\n    \"RequestMappingsPanelOrder1\": \"1\",\r\n    \"RequestMappingsPanelWidth0\": \"75\",\r\n    \"RequestMappingsPanelWidth1\": \"75\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"Spring Boot.BitWizardApplication.executor\": \"Run\",\r\n    \"git-widget-placeholder\": \"#10 on backend\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/ICTS23-25.494/Desktop/BitWizard\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.0\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"settings.editor.selected.configurable\": \"Groovy compiler\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"BitWizardApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <module name=\"wizard\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.wizard.BitWizardApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-28b599e66164-intellij.indexing.shared.core-IU-242.23339.11\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-IU-242.23339.11\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c5a118e0-2116-4f21-baf4-91041972526f\" name=\"Changes\" comment=\"\" />\r\n      <created>1728382216326</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728382216326</updated>\r\n      <workItem from=\"1728382217490\" duration=\"158000\" />\r\n      <workItem from=\"1728385650893\" duration=\"7000\" />\r\n      <workItem from=\"1728385671296\" duration=\"780000\" />\r\n      <workItem from=\"1728386460526\" duration=\"487000\" />\r\n      <workItem from=\"1728386959360\" duration=\"304000\" />\r\n      <workItem from=\"1728387273472\" duration=\"112000\" />\r\n      <workItem from=\"1728388627110\" duration=\"1145000\" />\r\n      <workItem from=\"1728390741624\" duration=\"175000\" />\r\n      <workItem from=\"1728390926022\" duration=\"556000\" />\r\n      <workItem from=\"1728391489319\" duration=\"2000\" />\r\n      <workItem from=\"1728391514260\" duration=\"851000\" />\r\n      <workItem from=\"1728392609325\" duration=\"72000\" />\r\n      <workItem from=\"1728392703005\" duration=\"2527000\" />\r\n      <workItem from=\"1728396485113\" duration=\"1707000\" />\r\n      <workItem from=\"1728412721034\" duration=\"36000\" />\r\n      <workItem from=\"1728417929381\" duration=\"661000\" />\r\n      <workItem from=\"1728490399013\" duration=\"6043000\" />\r\n      <workItem from=\"1728566581893\" duration=\"1615000\" />\r\n      <workItem from=\"1728813576084\" duration=\"7115000\" />\r\n      <workItem from=\"1728829504836\" duration=\"4952000\" />\r\n      <workItem from=\"1728843403047\" duration=\"1420000\" />\r\n      <workItem from=\"1728845408005\" duration=\"487000\" />\r\n      <workItem from=\"1728901387073\" duration=\"3604000\" />\r\n      <workItem from=\"1728913245356\" duration=\"3618000\" />\r\n      <workItem from=\"1728978237564\" duration=\"4729000\" />\r\n      <workItem from=\"1728994214337\" duration=\"6424000\" />\r\n      <workItem from=\"1729081965725\" duration=\"5025000\" />\r\n      <workItem from=\"1729361757152\" duration=\"3857000\" />\r\n      <workItem from=\"1729420969715\" duration=\"8897000\" />\r\n      <workItem from=\"1729441000140\" duration=\"261000\" />\r\n      <workItem from=\"1729441699635\" duration=\"3044000\" />\r\n      <workItem from=\"1729503028053\" duration=\"4300000\" />\r\n      <workItem from=\"1729512706044\" duration=\"3507000\" />\r\n      <workItem from=\"1729584764412\" duration=\"11375000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"-\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728496343342</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728496343342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"lista viaggi\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1728999400062</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1728999400062</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Gestione messaggi di errori pagina di registrazione\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729365609047</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729365609047</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Registrazione agenzia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729426970844</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729426970845</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Registrazione e login fixato  agenzia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729514038324</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729514038324</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Push Agenzia\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729585092593</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729585092593</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Iscrizione viaggi agenzie\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729788347238</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729788347238</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"8\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"-\" />\r\n    <MESSAGE value=\"lista viaggi\" />\r\n    <MESSAGE value=\"Gestione messaggi di errori pagina di registrazione\" />\r\n    <MESSAGE value=\"Registrazione agenzia\" />\r\n    <MESSAGE value=\"Registrazione e login fixato  agenzia\" />\r\n    <MESSAGE value=\"Push Agenzia\" />\r\n    <MESSAGE value=\"Creazione viaggio agenzia (da fixare il caricamento dettagli pagina dei viaggi creati da agenzia)\" />\r\n    <MESSAGE value=\"q\" />\r\n    <MESSAGE value=\"Iscrizione viaggi agenzie\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Iscrizione viaggi agenzie\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/.idea/workspace.xml	(date 1729852162603)
@@ -4,8 +4,20 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c5a118e0-2116-4f21-baf4-91041972526f" name="Changes" comment="Iscrizione viaggi agenzie">
+    <list default="true" id="c5a118e0-2116-4f21-baf4-91041972526f" name="Changes" comment="Creazione viaggi agenzie fixato">
+      <change afterPath="$PROJECT_DIR$/BitWizard/src/main/resources/Templates/HomeAgenzia.html" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/controllers/HomeController.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/controllers/HomeController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/controllers/ViaggioController.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioService.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioService.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/controllers/HomeController.class" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/controllers/HomeController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/controllers/ViaggioController.class" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/controllers/ViaggioController.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/repos/ViaggioDAO.class" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/repos/ViaggioDAO.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/services/ViaggioService.class" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/services/ViaggioService.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/services/ViaggioServiceImpl.class" beforeDir="false" afterPath="$PROJECT_DIR$/BitWizard/target/classes/com/wizard/services/ViaggioServiceImpl.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -16,9 +28,9 @@
     <option name="RECENT_TEMPLATES">
       <list>
         <option value="Exception" />
-        <option value="HTML File" />
         <option value="Interface" />
         <option value="Class" />
+        <option value="HTML File" />
       </list>
     </option>
   </component>
@@ -54,31 +66,31 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "DefaultHtmlFileTemplate": "HTML File",
-    "RequestMappingsPanelOrder0": "0",
-    "RequestMappingsPanelOrder1": "1",
-    "RequestMappingsPanelWidth0": "75",
-    "RequestMappingsPanelWidth1": "75",
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "Spring Boot.BitWizardApplication.executor": "Run",
-    "git-widget-placeholder": "#10 on backend",
-    "kotlin-language-version-configured": "true",
-    "last_opened_file_path": "C:/Users/ICTS23-25.494/Desktop/BitWizard",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "nodejs_package_manager_path": "npm",
-    "project.structure.last.edited": "Project",
-    "project.structure.proportion": "0.0",
-    "project.structure.side.proportion": "0.2",
-    "settings.editor.selected.configurable": "Groovy compiler",
-    "vue.rearranger.settings.migration": "true"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;DefaultHtmlFileTemplate&quot;: &quot;HTML File&quot;,
+    &quot;RequestMappingsPanelOrder0&quot;: &quot;0&quot;,
+    &quot;RequestMappingsPanelOrder1&quot;: &quot;1&quot;,
+    &quot;RequestMappingsPanelWidth0&quot;: &quot;75&quot;,
+    &quot;RequestMappingsPanelWidth1&quot;: &quot;75&quot;,
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
+    &quot;Spring Boot.BitWizardApplication.executor&quot;: &quot;Run&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;#10 on backend&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/ICTS23-25.494/Desktop/BitWizard&quot;,
+    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
+    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
+    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
+    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
+    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.2&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;Groovy compiler&quot;,
+    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
   }
-}]]></component>
+}</component>
   <component name="RunManager">
     <configuration name="BitWizardApplication" type="SpringBootApplicationConfigurationType" factoryName="Spring Boot" nameIsGenerated="true">
       <option name="FRAME_DEACTIVATION_UPDATE_POLICY" value="UpdateClassesAndResources" />
@@ -139,6 +151,7 @@
       <workItem from="1729503028053" duration="4300000" />
       <workItem from="1729512706044" duration="3507000" />
       <workItem from="1729584764412" duration="11375000" />
+      <workItem from="1729847876403" duration="4269000" />
     </task>
     <task id="LOCAL-00001" summary="-">
       <option name="closed" value="true" />
@@ -196,7 +209,15 @@
       <option name="project" value="LOCAL" />
       <updated>1729788347238</updated>
     </task>
-    <option name="localTasksCounter" value="8" />
+    <task id="LOCAL-00008" summary="Creazione viaggi agenzie fixato">
+      <option name="closed" value="true" />
+      <created>1729788745404</created>
+      <option name="number" value="00008" />
+      <option name="presentableId" value="LOCAL-00008" />
+      <option name="project" value="LOCAL" />
+      <updated>1729788745404</updated>
+    </task>
+    <option name="localTasksCounter" value="9" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -215,7 +236,8 @@
     <MESSAGE value="Creazione viaggio agenzia (da fixare il caricamento dettagli pagina dei viaggi creati da agenzia)" />
     <MESSAGE value="q" />
     <MESSAGE value="Iscrizione viaggi agenzie" />
-    <option name="LAST_COMMIT_MESSAGE" value="Iscrizione viaggi agenzie" />
+    <MESSAGE value="Creazione viaggi agenzie fixato" />
+    <option name="LAST_COMMIT_MESSAGE" value="Creazione viaggi agenzie fixato" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
Index: BitWizard/src/main/java/com/wizard/services/ViaggioService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.services;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.wizard.DTO.TagDTO;\r\nimport com.wizard.DTO.ViaggioCreazioneDTO;\r\nimport com.wizard.entities.PartecipantiViaggio;\r\nimport com.wizard.entities.Utente;\r\nimport com.wizard.entities.Viaggio;\r\nimport com.wizard.repos.ViaggioDTO;\r\n\r\nimport jakarta.servlet.http.HttpSession;\r\n\r\n@Service\r\npublic interface ViaggioService {\r\n\r\n\tViaggio salvaViaggio(Viaggio nuovoViaggio, List<TagDTO> tagDTOs);\r\n\r\n\tViaggio salvaViaggioAgenzia(Viaggio viaggio, List<TagDTO> tagDTOs);\r\n\t\r\n\tPartecipantiViaggio addPartecipanteViaggio(Utente partecipante, Viaggio viaggio);\r\n\t\r\n\tvoid removePartecipanteViaggio(Long utenteId, Long viaggioId);\r\n\t\r\n\tList<ViaggioDTO> getViaggiByTag (Integer tagId);\r\n\t\r\n\tList<ViaggioDTO> getViaggiByEta(Integer min, Integer max);\r\n\t\r\n\tList<ViaggioDTO> getViaggiByDestinazione(String destinazione);\r\n\r\n\tList<ViaggioDTO> getViaggiByPartenza(String partenza);\r\n\r\n\tList<ViaggioDTO> getViaggiByPrezzo(Integer min, Integer max);\r\n\r\n\tList<ViaggioDTO> findViaggiByUtenteId(Long utenteId);\r\n\r\n\tList<ViaggioDTO> findViaggiByCreatore(Long creatoreId);\r\n\r\n\tList<ViaggioDTO> getAllViaggi();\r\n\r\n\tViaggioDTO modificaViaggio(Long viaggioId, ViaggioCreazioneDTO viaggioDTO, List<TagDTO> tagDTOs);\r\n\r\n\tList<Viaggio> trovaViaggiPerUtente(Long utenteId);\r\n\t\r\n\tViaggioDTO toDTO(Viaggio viaggio);\r\n\t\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/services/ViaggioService.java b/BitWizard/src/main/java/com/wizard/services/ViaggioService.java
--- a/BitWizard/src/main/java/com/wizard/services/ViaggioService.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/services/ViaggioService.java	(date 1729848615353)
@@ -38,6 +38,8 @@
 
 	List<ViaggioDTO> findViaggiByCreatore(Long creatoreId);
 
+	List<ViaggioDTO> getViaggiByAgenzia(Long agenziaId);
+
 	List<ViaggioDTO> getAllViaggi();
 
 	ViaggioDTO modificaViaggio(Long viaggioId, ViaggioCreazioneDTO viaggioDTO, List<TagDTO> tagDTOs);
Index: BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.services;\r\n\r\nimport java.util.Date;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Optional;\r\nimport java.util.Set;\r\nimport java.util.stream.Collectors;\r\n\r\nimport org.hibernate.Session;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.wizard.DTO.TagDTO;\r\nimport com.wizard.DTO.ViaggioCreazioneDTO;\r\nimport com.wizard.entities.Agenzia;\r\nimport com.wizard.entities.ChiavePartecipantiViaggio;\r\nimport com.wizard.entities.PartecipantiViaggio;\r\nimport com.wizard.entities.Stato;\r\nimport com.wizard.entities.Tag;\r\nimport com.wizard.entities.Utente;\r\nimport com.wizard.entities.Viaggio;\r\nimport com.wizard.entities.ViaggioImmagini;\r\nimport com.wizard.entities.ViaggioTag;\r\nimport com.wizard.repos.AgenziaDAO;\r\nimport com.wizard.repos.ImmagineDAO;\r\nimport com.wizard.repos.PartecipantiViaggioDAO;\r\nimport com.wizard.repos.StatoDAO;\r\nimport com.wizard.repos.TagDAO;\r\nimport com.wizard.repos.UtenteDAO;\r\nimport com.wizard.repos.ViaggioDAO;\r\nimport com.wizard.repos.ViaggioDTO;\r\nimport com.wizard.repos.ViaggioImmaginiDAO;\r\nimport com.wizard.repos.ViaggioTagDAO;\r\n\r\nimport jakarta.persistence.EntityManager;\r\nimport jakarta.persistence.EntityNotFoundException;\r\nimport jakarta.transaction.Transactional;\r\n\r\n@Service\r\npublic class ViaggioServiceImpl implements ViaggioService {\r\n\t\r\n\t@Autowired\r\n\tprivate ViaggioDAO dao;\r\n\t\r\n\t@Autowired\r\n\tprivate UtenteDAO utenteDAO;\r\n\t\r\n\t@Autowired\r\n\tprivate PartecipantiViaggioDAO partecipantiViaggioDAO;\r\n\t\r\n\t@Autowired\r\n    private ViaggioTagDAO viaggioTagDAO;\r\n\t\r\n\t@Autowired\r\n\tprivate TagDAO tagDAO;\r\n\t\r\n\t@Autowired\r\n\tprivate ViaggioImmaginiDAO viaggioImgDAO;\r\n\t\r\n\t@Autowired\r\n\tprivate ImmagineDAO immagineDAO;\r\n\t\r\n\t@Autowired\r\n\tprivate StatoDAO statoDAO;\r\n\t\r\n\t@Autowired\r\n    private EntityManager entityManager;\r\n\t\r\n    @Autowired\r\n    private AgenziaDAO agenziaDAO;\r\n    \r\n    @Autowired\r\n    private NotificaService notificaService;\r\n\r\n\tpublic void abilitaFiltroViaggiNonCancellati() {\r\n        // Ottieni la sessione Hibernate e abilita il filtro\r\n        Session session = entityManager.unwrap(Session.class);\r\n        session.enableFilter(\"deletedFilter\").setParameter(\"isDeleted\", false);\r\n    }\r\n\t\r\n\t@Transactional\r\n\tpublic Viaggio salvaViaggio(Viaggio viaggio, List<TagDTO> tagDTOs) {\r\n\t    \r\n\t    System.out.println(\"Inizio creazione viaggio...\");\r\n\r\n\t    // Imposta lo stato del viaggio (puoi usare uno stato predefinito)\r\n\t    Stato stato = statoDAO.findById(1)\r\n\t        .orElseThrow(() -> new RuntimeException(\"Stato non trovato\"));\r\n\t    viaggio.setStato(stato);\r\n\t    \r\n\t    if (viaggio.getImmagineCopertina() != null) {\r\n            immagineDAO.save(viaggio.getImmagineCopertina());\r\n        }\r\n\r\n\t    // Salva il viaggio\r\n\t    Viaggio viaggioSalvato;\r\n\t    try {\r\n\t        viaggioSalvato = dao.save(viaggio);\r\n\t        System.out.println(\"Viaggio salvato con ID: \" + viaggioSalvato.getViaggioId());\r\n\t\t\tif (viaggioSalvato.getAgenziaId()!=null) {\r\n\t\t\t\tSystem.out.println(\"agenzia id : \" + viaggioSalvato.getAgenziaId());\r\n\t\t\t}else{\r\n\t\t\t\tSystem.out.println(\"creatore id :\" + viaggioSalvato.getCreatoreId());\r\n\t\t\t}\r\n\r\n\t    } catch (Exception e) {\r\n\t        System.out.println(\"Errore durante il salvataggio del viaggio: \" + e.getMessage());\r\n\t        throw e;\r\n\t    }\r\n\r\n\t    // Gestisci i tag\r\n\t    if (tagDTOs != null && !tagDTOs.isEmpty()) {\r\n\t\t\tSystem.out.println(\"Siamo nel controllo tag\");\r\n\t        for (TagDTO tagDTO : tagDTOs) {\r\n\t\t\t\tSystem.out.println(\"Siamo nel controllo tag 2\");\r\n\t\t\t\ttry {\r\n\t\t\t\t    Tag tag = tagDAO.findById(tagDTO.getTagId()).orElseGet(() -> {\r\n\t\t\t\t        Tag newTag = new Tag();\r\n\t\t\t\t        newTag.setTipoTag(tagDTO.getTipoTag());\r\n\t\t\t\t        return tagDAO.save(newTag);\r\n\t\t\t\t    });\r\n\t\t\t\tSystem.out.println(\"Siamo nel controllo tag 4\");\r\n\t            ViaggioTag viaggioTag = new ViaggioTag();\r\n\t            viaggioTag.setViaggio(viaggioSalvato);\r\n\t            viaggioTag.setTag(tag);\r\n\t            viaggioTagDAO.save(viaggioTag);\r\n\t\t\t\tSystem.out.println(\"Siamo nel controllo tag 5\");\r\n\t        } catch (Exception e) {\r\n\t\t\t\tSystem.out.println(\"Errore durante la gestione del tag: \" + tagDTO.getTagId());\r\n\t\t\t    throw new RuntimeException(\"Errore durante il salvataggio del tag\", e);\r\n\t\t\t}\r\n\t        }\r\n\t    }\r\n\t\treturn viaggioSalvato;\r\n\t}\r\n\r\n\tpublic Viaggio salvaViaggioAgenzia(Viaggio viaggio, List<TagDTO> tagDTOs) {\r\n\r\n\t\tStato stato = statoDAO.findById(1)\r\n\t\t\t\t.orElseThrow(() -> new RuntimeException(\"Stato non trovato\"));\r\n\t\tviaggio.setStato(stato);\r\n\r\n\t\tif (viaggio.getImmagineCopertina() != null) {\r\n\t\t\timmagineDAO.save(viaggio.getImmagineCopertina());\r\n\t\t}\r\n\r\n\t\tViaggio viaggioSalvato;\r\n\t\ttry {\r\n\t\t\tviaggioSalvato = dao.save(viaggio);\r\n\t\t\tSystem.out.println(\"Viaggio salvato con ID: \" + viaggioSalvato.getViaggioId());\r\n\t\t\tif (viaggioSalvato.getAgenziaId()!=null) {\r\n\t\t\t\tSystem.out.println(\"agenzia id : \" + viaggioSalvato.getAgenziaId());\r\n\t\t\t}else{\r\n\t\t\t\tSystem.out.println(\"creatore id :\" + viaggioSalvato.getCreatoreId());\r\n\t\t\t}\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tSystem.out.println(\"Errore durante il salvataggio del viaggio: \" + e.getMessage());\r\n\t\t\tthrow e;\r\n\t\t}\r\n\r\n\t\t// Gestisci i tag\r\n\t\tif (tagDTOs != null && !tagDTOs.isEmpty()) {\r\n\t\t\tfor (TagDTO tagDTO : tagDTOs) {\r\n\t\t\t\tTag tag = tagDAO.findById(tagDTO.getTagId())\r\n\t\t\t\t\t\t.orElseGet(() -> {\r\n\t\t\t\t\t\t\tTag newTag = new Tag();\r\n\t\t\t\t\t\t\tnewTag.setTipoTag(tagDTO.getTipoTag());\r\n\t\t\t\t\t\t\treturn tagDAO.save(newTag);\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\tViaggioTag viaggioTag = new ViaggioTag();\r\n\t\t\t\tviaggioTag.setViaggio(viaggioSalvato);\r\n\t\t\t\tviaggioTag.setTag(tag);\r\n\t\t\t\tviaggioTagDAO.save(viaggioTag);\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn viaggioSalvato;\r\n\t}\r\n\r\n\t    @Transactional\r\n\t    public ViaggioDTO modificaViaggio(Long viaggioId, ViaggioCreazioneDTO viaggioDTO, List<TagDTO> tagDTOs) {\r\n\t        \r\n\t        Viaggio viaggio = dao.findById(viaggioId)\r\n\t            .orElseThrow(() -> new EntityNotFoundException(\"Viaggio non trovato con id \" + viaggioId));\r\n\r\n\t        \r\n\t        viaggio.setNome(viaggioDTO.getNome());\r\n\t        viaggio.setLuogoPartenza(viaggioDTO.getLuogoPartenza());\r\n\t        viaggio.setLuogoArrivo(viaggioDTO.getLuogoArrivo());\r\n\t        viaggio.setDataPartenza(viaggioDTO.getDataPartenza());\r\n\t        viaggio.setDataRitorno(viaggioDTO.getDataRitorno());\r\n\t        viaggio.setDataScadenza(viaggioDTO.getDataScadenza());\r\n\t        viaggio.setNumPartMin(viaggioDTO.getNumPartMin());\r\n\t        viaggio.setNumPartMax(viaggioDTO.getNumPartMax());\r\n\t        viaggio.setPrezzo(viaggioDTO.getPrezzo());\r\n\t        viaggio.setEtaMin(viaggioDTO.getEtaMin());\r\n\t        viaggio.setEtaMax(viaggioDTO.getEtaMax());\r\n\r\n\t        aggiornaViaggioTags(viaggio, tagDTOs);\r\n\r\n\t        dao.save(viaggio);\r\n\t        \r\n\t        try {\r\n\t            notificaService.creaNotifichePerPartecipanti(viaggio);\r\n\t        } catch (Exception e) {\r\n\t            System.err.println(\"Errore durante la creazione delle notifiche per il viaggio con id \" + viaggioId);\r\n\t        }\r\n\r\n\t        return toDTO(viaggio);\r\n\t    }\r\n\r\n\t    private void aggiornaViaggioTags(Viaggio viaggio, List<TagDTO> nuoviTagDTOs) {\r\n\t        Set<ViaggioTag> viaggioTagsEsistenti = viaggio.getViaggioTags();\r\n\r\n\t        // Identify tags to remove\r\n\t        Set<ViaggioTag> tagsToRemove = viaggioTagsEsistenti.stream()\r\n\t            .filter(vt -> nuoviTagDTOs.stream()\r\n\t                .noneMatch(tagDTO -> tagDTO.getTagId().equals(vt.getTag().getTagId())))\r\n\t            .collect(Collectors.toSet());\r\n\r\n\t        viaggioTagsEsistenti.removeAll(tagsToRemove);\r\n\r\n\t        // Identify tags to add\r\n\t        Set<Long> existingTagIds = viaggioTagsEsistenti.stream()\r\n\t            .map(vt -> vt.getTag().getTagId())\r\n\t            .collect(Collectors.toSet());\r\n\r\n\t        for (TagDTO tagDTO : nuoviTagDTOs) {\r\n\t            if (!existingTagIds.contains(tagDTO.getTagId())) {\r\n\t                Tag tag = tagDAO.findById(tagDTO.getTagId())\r\n\t                    .orElseThrow(() -> new IllegalArgumentException(\"Tag non trovato\"));\r\n\t                ViaggioTag nuovoViaggioTag = new ViaggioTag(viaggio, tag);\r\n\t                viaggioTagsEsistenti.add(nuovoViaggioTag);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    \r\n\t    @Override\r\n\t\tpublic ViaggioDTO toDTO(Viaggio viaggio) {\r\n\t        ViaggioDTO viaggioDTO = new ViaggioDTO();\r\n\r\n\t        viaggioDTO.setViaggioId(viaggio.getViaggioId());\r\n\t        viaggioDTO.setNome(viaggio.getNome());\r\n\t        viaggioDTO.setLuogoPartenza(viaggio.getLuogoPartenza());\r\n\t        viaggioDTO.setLuogoArrivo(viaggio.getLuogoArrivo());\r\n\t        viaggioDTO.setDataPartenza(viaggio.getDataPartenza());\r\n\t        viaggioDTO.setDataRitorno(viaggio.getDataRitorno());\r\n\t        viaggioDTO.setDataScadenza(viaggio.getDataScadenza());\r\n\t        viaggioDTO.setNumPartMin(viaggio.getNumPartMin());\r\n\t        viaggioDTO.setNumPartMax(viaggio.getNumPartMax());\r\n\t        viaggioDTO.setPrezzo(viaggio.getPrezzo());\r\n\t        viaggioDTO.setEtaMin(viaggio.getEtaMin());\r\n\t        viaggioDTO.setEtaMax(viaggio.getEtaMax());\r\n\t        // Map other fields as necessary\r\n\r\n\t        // Map tags\r\n\t        List<TagDTO> tagDTOs = viaggio.getViaggioTags().stream()\r\n\t            .map(viaggioTag -> new TagDTO(\r\n\t                viaggioTag.getTag().getTagId(),\r\n\t                viaggioTag.getTag().getTipoTag()\r\n\t            ))\r\n\t            .collect(Collectors.toList());\r\n\t        viaggioDTO.setTagDTOs(tagDTOs);\r\n\r\n\t        return viaggioDTO;\r\n\t    }\r\n\r\n\t@Transactional\r\n\tpublic PartecipantiViaggio addPartecipanteViaggio(Utente partecipante, Viaggio viaggio) {\r\n\r\n\t\t// Verifica se il partecipante esiste giÃ  per questo viaggio\r\n\t\tChiavePartecipantiViaggio chiavePartecipantiViaggio = new ChiavePartecipantiViaggio();\r\n\t\tchiavePartecipantiViaggio.setViaggioId(viaggio.getViaggioId());\r\n\t\tchiavePartecipantiViaggio.setUtenteId(partecipante.getUtenteId());\r\n\r\n\t\t// Cerca l'esistenza del record nella tabella partecipanti_viaggio\r\n\t\tOptional<PartecipantiViaggio> partecipanteEsistente = partecipantiViaggioDAO.findById(chiavePartecipantiViaggio);\r\n\r\n\t\tif (partecipanteEsistente.isPresent()) {\r\n\t\t\t// Se esiste giÃ , ritorna il partecipante esistente\r\n\t\t\treturn partecipanteEsistente.get();\r\n\t\t} else {\r\n\t\t\t// Crea un nuovo record per la tabella partecipanti_viaggio\r\n\t\t\tPartecipantiViaggio partecipanteViaggio = new PartecipantiViaggio();\r\n\t\t\tpartecipanteViaggio.setId(chiavePartecipantiViaggio);  // Imposta la chiave composta\r\n\t\t\tpartecipanteViaggio.setViaggio(viaggio);  // Associa il viaggio\r\n\t\t\tpartecipanteViaggio.setUtente(partecipante);  // Associa l'utente\r\n\t\t\tpartecipanteViaggio.setDataIscrizione(new Date());  // Imposta la data di iscrizione\r\n\r\n\t\t\t// Recupera lo stato di partecipazione predefinito\r\n\t\t\tStato statoPredefinito = statoDAO.findById(1)\r\n\t\t\t\t\t.orElseThrow(() -> new IllegalArgumentException(\"Stato di partecipazione predefinito non trovato\"));\r\n\t\t\tpartecipanteViaggio.setStatoPartecipazione(statoPredefinito);\r\n\r\n\t\t\tentityManager.merge(partecipante);\r\n\r\n\r\n\t\t\t// Aggiungi il partecipante alla lista dei partecipanti del viaggio\r\n\t\t\tviaggio.addPartecipante(partecipanteViaggio);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tnotificaService.creaNotifichePerIscrizioneViaggio(viaggio, partecipante);\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\tSystem.err.println(\"Errore durante la creazione delle notifiche per il viaggio con id \" + viaggio.getViaggioId());\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\r\n\t\t\treturn partecipanteViaggio;\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Override\r\n\tpublic void removePartecipanteViaggio(Long utenteId, Long viaggioId) {\r\n\t\t\r\n\t    int deleted = partecipantiViaggioDAO.deleteByViaggioIdAndUtenteId(viaggioId, utenteId);\r\n\t    \r\n\t    if (deleted == 0) {\r\n\t        throw new IllegalArgumentException(\"Partecipante con utenteId \" + utenteId + \" e viaggioId \" + viaggioId + \" non trovato.\");\r\n\t    }\r\n\t}\r\n\r\n\t\r\n    public List<ViaggioDTO> findViaggiByUtenteId(Long utenteId) {\r\n        List<Viaggio> viaggi = dao.findViaggiByPartecipanteId(utenteId);\r\n\r\n        return viaggi.stream()\r\n            .map(this::convertToDTO)\r\n            .collect(Collectors.toList());\r\n    }\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> findViaggiByCreatore(Long creatoreId) {\r\n\t\tList<Viaggio> viaggi = dao.findByCreatoreId(creatoreId);\r\n\r\n\t\treturn viaggi.stream()\r\n\t\t\t\t.map(this::convertToDTO)\r\n\t\t\t\t.collect(Collectors.toList());\r\n\t}\r\n\r\n\tprivate ViaggioDTO convertToDTO(Viaggio viaggio) {\r\n        ViaggioDTO dto = new ViaggioDTO();\r\n        dto.setViaggioId(viaggio.getViaggioId());\r\n        dto.setNome(viaggio.getNome());\r\n        dto.setLuogoPartenza(viaggio.getLuogoPartenza());\r\n        dto.setLuogoArrivo(viaggio.getLuogoArrivo());\r\n        dto.setDataPartenza(viaggio.getDataPartenza());\r\n        dto.setDataRitorno(viaggio.getDataRitorno());\r\n        dto.setPrezzo(viaggio.getPrezzo());\r\n\r\n        return dto;\r\n    }\r\n\t\r\n    public List<Viaggio> trovaViaggiPerUtente(Long utenteId) {\r\n        List<PartecipantiViaggio> partecipazioni = partecipantiViaggioDAO.findByUtente_UtenteId(utenteId);\r\n        \r\n        // Estrai tutti i viaggi dalle partecipazioni\r\n        return partecipazioni.stream()\r\n                             .map(PartecipantiViaggio::getViaggio)\r\n                             .collect(Collectors.toList());\r\n    }\r\n\t\r\n\tprivate void associaTagEViaggio(List<Long> tagIds, Viaggio viaggio) {\r\n\t    if (tagIds != null && !tagIds.isEmpty()) {\r\n\t        tagDAO.findAllById(tagIds).forEach(tag -> {\r\n\t            ViaggioTag viaggioTag = new ViaggioTag();\r\n\t            viaggioTag.setViaggio(viaggio);\r\n\t            viaggioTag.setTag(tag);\r\n\t            viaggioTagDAO.save(viaggioTag);\r\n\t        });\r\n\t    }\r\n\t}\r\n\t\r\n\t// ?\r\n\tprivate void associaImmaginiEViaggio(List<Integer> immagineIds, Viaggio viaggio) {\r\n\t    if (immagineIds != null && !immagineIds.isEmpty()) {\r\n\t        immagineDAO.findAllById(immagineIds).forEach(immagine -> {\r\n\t            ViaggioImmagini viaggioImg = new ViaggioImmagini();\r\n\t            viaggioImg.setViaggio(viaggio);\r\n\t            viaggioImg.setImmagine(immagine);\r\n\t            viaggioImgDAO.save(viaggioImg);\r\n\t        });\r\n\t    }\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getViaggiByTag(Integer tagId) {\r\n\t    // Recupera tutte le associazioni Viaggio-Tag per il tag specificato\r\n\t    List<ViaggioTag> viaggiTag = viaggioTagDAO.findByTagTagId(tagId);\r\n\t    \r\n\t    // Estrai gli ID dei viaggi da queste associazioni\r\n\t    List<Long> viaggiId = viaggiTag.stream()\r\n\t                                   .map(vt -> vt.getViaggio().getViaggioId())\r\n\t                                   .collect(Collectors.toList());\r\n\t    \r\n\t    // Usa gli ID per recuperare tutti i Viaggi\r\n\t    List<Viaggio> viaggi = dao.findAllById(viaggiId);\r\n\t    \r\n\t    // Converti ciascun Viaggio in ViaggioDTO\r\n\t    List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n\t                                       .map(v -> convertToDTO(v))\r\n\t                                       .collect(Collectors.toList());\r\n\t    \r\n\t    return viaggiDTO;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getViaggiByEta(Integer min, Integer max) {\r\n\t    List<Viaggio> viaggi = dao.findByEtaMinGreaterThanEqualAndEtaMaxLessThanEqual(min, max);\r\n\t    \r\n\t // Converti ciascun Viaggio in ViaggioDTO\r\n\t    List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n\t                                       .map(v -> convertToDTO(v))\r\n\t                                       .collect(Collectors.toList());\r\n\t    \r\n\t    return viaggiDTO;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getViaggiByDestinazione(String destinazione) {\r\n\t    List<Viaggio> viaggi = dao.findByLuogoArrivoContainingIgnoreCase(destinazione);\r\n\t    \r\n\t // Converti ciascun Viaggio in ViaggioDTO\r\n\t    List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n\t                                       .map(v -> convertToDTO(v))\r\n\t                                       .collect(Collectors.toList());\r\n\t    \r\n\t    return viaggiDTO;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getViaggiByPartenza(String partenza) {\r\n\t\tList<Viaggio> viaggi = dao.findByLuogoPartenzaContainingIgnoreCase(partenza);\r\n\t\t\r\n\t\t// Converti ciascun Viaggio in ViaggioDTO\r\n\t    List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n\t                                       .map(v -> convertToDTO(v))\r\n\t                                       .collect(Collectors.toList());\r\n\r\n\treturn viaggiDTO;\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getViaggiByPrezzo(Integer min, Integer max) {\r\n\t\tList<Viaggio> viaggi = dao.findByPrezzoBetween(min,max);\r\n\t\t\r\n\t\t// Converti ciascun Viaggio in ViaggioDTO\r\n\t    List<ViaggioDTO> viaggiDTO = viaggi.stream()\r\n\t                                       .map(v -> convertToDTO(v))\r\n\t                                       .collect(Collectors.toList());\r\n\r\n\t\treturn viaggiDTO;\r\n\r\n\t}\r\n\r\n\t@Override\r\n\tpublic List<ViaggioDTO> getAllViaggi() {\r\n\t\tList<Viaggio> viaggi = dao.findAll();\r\n\t\t\r\n\t\treturn viaggi.stream()\r\n\t            .map(this::convertToDTO)\r\n\t            .collect(Collectors.toList());\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java b/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java
--- a/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/services/ViaggioServiceImpl.java	(date 1729849125297)
@@ -89,7 +89,7 @@
 	        .orElseThrow(() -> new RuntimeException("Stato non trovato"));
 	    viaggio.setStato(stato);
 	    
-	    if (viaggio.getImmagineCopertina() != null) {
+	    if (viaggio.getImmagineCopertina()!= null) {
             immagineDAO.save(viaggio.getImmagineCopertina());
         }
 
@@ -340,6 +340,15 @@
 				.collect(Collectors.toList());
 	}
 
+	@Override
+	public List<ViaggioDTO> getViaggiByAgenzia(Long agenziaId) {
+		List<Viaggio> viaggi = dao.findByAgenziaId(agenziaId);
+
+		return viaggi.stream()
+				.map(this::convertToDTO)
+				.collect(Collectors.toList());
+	}
+
 	private ViaggioDTO convertToDTO(Viaggio viaggio) {
         ViaggioDTO dto = new ViaggioDTO();
         dto.setViaggioId(viaggio.getViaggioId());
Index: BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.repos;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport com.wizard.entities.Viaggio;\r\n\r\nimport jakarta.transaction.Transactional;\r\n\r\n@Repository\r\npublic interface ViaggioDAO extends JpaRepository<Viaggio, Long> {\r\n\t\r\n\tList<Viaggio> findByNome(String nome);\r\n\r\n\tList<Viaggio> findByEtaMinGreaterThanEqualAndEtaMaxLessThanEqual(Integer min, Integer max);\r\n\t\r\n\tList<Viaggio> findByLuogoArrivoContainingIgnoreCase(String destinazione);\r\n\r\n\tList<Viaggio> findByLuogoPartenzaContainingIgnoreCase(String partenza);\r\n\r\n\tList<Viaggio> findByCreatoreId(Long creatoreId);\r\n\r\n\tList<Viaggio> findByPrezzoBetween(Integer min, Integer max);\r\n\t\r\n\t@Transactional\r\n\t@Query(\"SELECT v FROM Viaggio v JOIN v.partecipanti p WHERE p.utente.id = :utenteId\")\r\n\tList<Viaggio> findViaggiByPartecipanteId(Long utenteId);\r\n\r\n\r\n\r\n }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java b/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java
--- a/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/repos/ViaggioDAO.java	(date 1729848846551)
@@ -29,6 +29,5 @@
 	@Query("SELECT v FROM Viaggio v JOIN v.partecipanti p WHERE p.utente.id = :utenteId")
 	List<Viaggio> findViaggiByPartecipanteId(Long utenteId);
 
-
-
- }
\ No newline at end of file
+    List<Viaggio> findByAgenziaId(Long agenziaId);
+}
\ No newline at end of file
Index: BitWizard/src/main/resources/Templates/HomeAgenzia.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/resources/Templates/HomeAgenzia.html b/BitWizard/src/main/resources/Templates/HomeAgenzia.html
new file mode 100644
--- /dev/null	(date 1729851743634)
+++ b/BitWizard/src/main/resources/Templates/HomeAgenzia.html	(date 1729851743634)
@@ -0,0 +1,95 @@
+<!DOCTYPE html>
+<html lang="it">
+<head>
+    <meta charset="UTF-8">
+    <meta name="viewport" content="width=device-width, initial-scale=1.0">
+    <title>Home - Viaggi</title>
+    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
+</head>
+<body>
+
+<div class="container mt-5">
+    <h1 class="text-center">Benvenuto nella Home dei Viaggi</h1>
+
+    <div class="row mt-4">
+        <div class="col-md-6">
+            <h2>Viaggi creati terminati</h2>
+            <div id="viaggiTerminati" class="card-columns"></div>
+        </div>
+
+        <div class="col-md-6">
+            <h2>Viaggi creati in corso </h2>
+            <div id="viaggiCreati" class="card-columns"></div>
+        </div>
+    </div>
+
+    <div class="text-center mt-4">
+        <a href="/CreaViaggio" class="btn btn-primary">Crea Nuovo Viaggio</a>
+    </div>
+</div>
+
+<script>
+    // Variabile per memorizzare gli ID dei viaggi terminati
+    let viaggiTerminatiIds = [];
+
+    // Funzione per caricare i viaggi terminati
+    function loadViaggiTerminati() {
+        fetch('api/viaggi/azienda/terminati')
+            .then(response => {
+                if (!response.ok) throw new Error('Network response was not ok');
+                return response.json();
+            })
+            .then(data => {
+                const container = document.getElementById('viaggiTerminati');
+                container.innerHTML = ''; // Pulisci il contenitore
+                data.forEach(viaggio => {
+                    viaggiTerminatiIds.push(viaggio.viaggioId); // Memorizza l'ID del viaggio terminato
+                    const card = `
+                    <a href="http://localhost:10134/paginaViaggio/viaggio?viaggioId=${viaggio.viaggioId}" class="card" style="text-decoration: none; color: inherit;">
+                        <div class="card-body">
+                            <h5 class="card-title">${viaggio.titolo}</h5>
+                            <p class="card-text">Data di Ritorno: ${new Date(viaggio.dataRitorno).toLocaleDateString()}</p>
+                        </div>
+                    </a>`;
+                    container.innerHTML += card;
+                });
+                loadViaggiCreati(); // Carica i viaggi creati dopo aver caricato i viaggi terminati
+            })
+            .catch(error => console.error('Error fetching viaggi terminati:', error));
+    }
+
+    // Funzione per caricare i viaggi creati
+    function loadViaggiCreati() {
+        fetch('api/viaggi/azienda/creati')
+            .then(response => {
+                if (!response.ok) throw new Error('Network response was not ok');
+                return response.json();
+            })
+            .then(data => {
+                const container = document.getElementById('viaggiCreati');
+                container.innerHTML = ''; // Pulisci il contenitore
+                data.forEach(viaggio => {
+                    // Controlla se l'ID del viaggio Ã¨ giÃ  presente nei viaggi terminati
+                    if (!viaggiTerminatiIds.includes(viaggio.viaggioId)) {
+                        const card = `
+                        <a href="http://localhost:10134/paginaViaggio/viaggio?viaggioId=${viaggio.viaggioId}" class="card" style="text-decoration: none; color: inherit;">
+                            <div class="card-body">
+                                <h5 class="card-title">${viaggio.nome}</h5>
+                                <p class="card-text">Data di Creazione: ${new Date(viaggio.dataRitorno).toLocaleDateString()}</p>
+                            </div>
+                        </a>`;
+                        container.innerHTML += card;
+                    }
+                });
+            })
+            .catch(error => console.error('Error fetching viaggi creati:', error));
+    }
+
+    // Carica i dati quando la pagina Ã¨ pronta
+    document.addEventListener('DOMContentLoaded', function () {
+        loadViaggiTerminati();
+    });
+</script>
+
+</body>
+</html>
\ No newline at end of file
Index: BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wizard.repos;\r\n\r\nimport com.wizard.entities.Agenzia;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\nimport java.util.Optional;\r\n\r\npublic interface AgenziaDAO extends JpaRepository<Agenzia, Long> {\r\n\r\n        Optional<Agenzia> findAgenziaByPartitaIva(String partitaIva);\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java b/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java
--- a/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java	(revision 2cb293d2812545c37f9eac38fcedf3eaf12710ff)
+++ b/BitWizard/src/main/java/com/wizard/repos/AgenziaDAO.java	(date 1729848841851)
@@ -9,6 +9,4 @@
 
         Optional<Agenzia> findAgenziaByPartitaIva(String partitaIva);
 
-
-
 }
