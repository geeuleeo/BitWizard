 
--CustomAuthSuccessHandler
@Override
    public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
                                        Authentication authentication) throws IOException, ServletException {
        // Ottieni l'email dall'oggetto Authentication
        String email = authentication.getName();

        // Recupera l'utente dal database
        Utente utente = utenteRepository.findByEmail(email).orElse(null);
        System.out.println("1");

        if  (utente == null) {

            System.out.println("2");
            Optional<Agenzia> agenzia = agenziaRepository.findAgenziaByPartitaIva(email);

            if (agenzia.isPresent()) {
                Agenzia agenzia2 = agenzia.get();
                HttpSession session = request.getSession();
                session.setAttribute("agenziaLoggata", agenzia2);

                response.sendRedirect("/home");
            }


        }

        // Memorizza l'utente nella HttpSession
        HttpSession session = request.getSession();
        session.setAttribute("utenteLoggato", utente);

        // Reindirizza alla pagina home
        response.sendRedirect("/home");
    }

--Security

public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disabilita CSRF se non necessario
            .authorizeHttpRequests(authorize -> authorize
                .requestMatchers("/login", "/registrazione","/registrazioneAgenzia","loginAgenzia").permitAll()
                .anyRequest().authenticated()
            )
            .formLogin(form -> form
                .loginPage("/login")
                .permitAll()
            ).formLogin(form -> {
                form.loginPage("/loginAzienda").permitAll();
                })
                    .logout(logout -> logout
                        .permitAll()
                );



        return http.build();
    }

--AgenziaController

   @PostMapping("/signup")
    public ResponseEntity<?>  signUp (@Valid@RequestBody AgenziaRegistrazioneDTO agenziaRegistrazioneDTO){

       if (agenziaDAO.findAgenziaByPartitaIva(agenziaRegistrazioneDTO.getPartitaIVA()).isPresent()){
           return
           ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Partita IVA gia presente nel database ");
       }

        Agenzia agenzia = new Agenzia();
       agenzia.setPartitaIva(agenziaRegistrazioneDTO.getPartitaIVA());
       agenzia.setNome(agenziaRegistrazioneDTO.getNome());
       agenzia.setPassword(passwordEncoder.encode(agenziaRegistrazioneDTO.getPassword()));
       agenzia.setDescrizione(agenziaRegistrazioneDTO.getDescrizione());


       agenziaDAO.save(agenzia);

       return ResponseEntity.status(HttpStatus.CREATED).body("Registrazione avvenuta con successo ");

    }
    
}

--Home controller => /loginAgenzia

@PostMapping("/loginAgenzia")
   public String loginAgenzia(@RequestParam String partitaIva,
                       @RequestParam String password,
                       HttpSession session,
                       RedirectAttributes redirectAttributes) {
       try {
           // Crea un token di autenticazione
           UsernamePasswordAuthenticationToken authToken = new UsernamePasswordAuthenticationToken(partitaIva, password);

          // Autentica l'agenzia
           Authentication authentication = authenticationManager.authenticate(authToken);

           // Imposta l'agenzia autenticata nel contesto di sicurezza
           SecurityContextHolder.getContext().setAuthentication(authentication);

           // Recupera i dettagli dell'agenzia (cast a CustomDettagliAgenzia)
           CustomDettagliAgenzia customDettagliAgenzia = (CustomDettagliAgenzia) authentication.getPrincipal();

           // Ottieni l'istanza di Agenzia dall'oggetto CustomDettagliAgenzia
           Agenzia agenzia = customDettagliAgenzia.getAgenzia(); // Supponendo che CustomDettagliAgenzia abbia un metodo getAgenzia()

           // Memorizza l'agenzia nella sessione
           session.setAttribute("agenziaLoggata", agenzia);


           return "redirect:/home";

       } catch (AuthenticationException e) {

            e.printStackTrace();
           return "redirect:/loginAzienda";
       }
   }

--custom dettagli agenzia 


    private Agenzia agenzia;

    public CustomDettagliAgenzia(Agenzia agenzia) {
        this.agenzia = agenzia;
    }


    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        List<GrantedAuthority> authorities = new ArrayList<>();
        authorities.add(new SimpleGrantedAuthority("privato"));
        return authorities;
    }

    @Override
    public String getPassword() {
        return agenzia.getPassword();
    }

    @Override
    public String getUsername() {
        return agenzia.getPartitaIva();
    }

    @Override
    public boolean isAccountNonExpired() {
        return UserDetails.super.isAccountNonExpired();
    }

    @Override
    public boolean isAccountNonLocked() {
        return UserDetails.super.isAccountNonLocked();
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return UserDetails.super.isCredentialsNonExpired();
    }

    @Override
    public boolean isEnabled() {
        return UserDetails.super.isEnabled();
    }

    public Agenzia getAgenzia() {return this.agenzia;}
}

--RegistrazioneAgenziaDTO

package com.wizard.DTO;

import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

public class AgenziaRegistrazioneDTO

{


    @NotBlank(message = "Partita IVA necessaria. ")
    private String partitaIVA;

    @NotBlank(message = "Nome obbligatorio.")
    private String nome;

    @NotBlank(message = "Password obbligatoria.")
    private String password;


    @Size(min = 2,max = 500,message = "La descrizione deve avere un minimo di 2 ed un massimo di 500 caratteri ")
    private String descrizione;

    public @Size(min = 2, max = 500, message = "La descrizione deve avere un minimo di 2 ed un massimo di 500 caratteri ") String getDescrizione() {
        return descrizione;
    }

    public void setDescrizione(@Size(min = 2, max = 500, message = "La descrizione deve avere un minimo di 2 ed un massimo di 500 caratteri ") String descrizione) {
        this.descrizione = descrizione;
    }

    public @NotBlank(message = "Partita IVA necessaria. ") String getPartitaIVA() {
        return partitaIVA;
    }

    public void setPartitaIVA(@NotBlank(message = "Partita IVA necessaria. ") String partitaIVA) {
        this.partitaIVA = partitaIVA;
    }

    public @NotBlank(message = "Nome obbligatorio.") String getNome() {
        return nome;
    }

    public void setNome(@NotBlank(message = "Nome obbligatorio.") String nome) {
        this.nome = nome;
    }

    public @NotBlank(message = "Password obbligatoria.") String getPassword() {
        return password;
    }

    public void setPassword(@NotBlank(message = "Password obbligatoria.") String password) {
        this.password = password;
    }
}

--agenzia service 

public interface AgenziaService {


    List<Agenzia> getAgenzie();
    Optional<Agenzia> getAgenziaByIVA(String IVA);


}


